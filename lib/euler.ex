defmodule Euler do
  @moduledoc """
  Documentation for Euler.
  """

  @doc """
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 1000.

  ## Example
      iex> Euler.sol_1()
      233168
  """
  def sol_1 do
    1..999 |> Enum.filter(&(rem(&1, 3) == 0 or rem(&1, 5) == 0)) |> :lists.sum()
  end

  def fib(),
    do:
      Stream.unfold({1, 1}, fn {a, b} ->
        {a, {b, a + b}}
      end)

  @doc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

  ## Example
      iex> Euler.sol_2()
      4613732
  """
  def sol_2 do
    fib()
    |> Enum.take_while(&(&1 < 4_000_000))
    |> Enum.filter(&(rem(&1, 2) == 0))
    |> :lists.sum()
  end

  def factors(n), do: factors(n, 2, [])

  def factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])
  def factors(n, k, acc) when rem(n, k) == 0, do: factors(div(n, k), k, [k | acc])
  def factors(n, k, acc), do: factors(n, k + 1, acc)

  @doc """
  The prime factors of 13195 are 5, 7, 13 and 29.

  What is the largest prime factor of the number 600851475143 ?
  ## Example
      iex> Euler.sol_3()
      6857
  """
  def sol_3 do
    600_851_475_143 |> factors |> :lists.max()
  end

  def is_palindrome?(n), do: String.reverse(Integer.to_string(n)) == Integer.to_string(n)

  @doc """
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

  Find the largest palindrome made from the product of two 3-digit numbers.

  ## Example
      iex> Euler.sol_4()
      906609
  """
  def sol_4 do
    :lists.max(
      for a <- 100..999,
          b <- 100..999,
          c = a * b,
          is_palindrome?(c) do
        c
      end
    )
  end

  @doc """
  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

  ## Example
      iex> Euler.sol_5()
      232_792_560
  """
  def sol_5 do
    limit = 20
    sol_5(limit + 1, Enum.to_list(limit..2), Enum.to_list(limit..2))
  end

  def sol_5(n, [], _divisors), do: n

  def sol_5(n, [h | t], divisors) do
    case rem(n, h) do
      0 -> sol_5(n, t, divisors)
      _ -> sol_5(n + 1, divisors, divisors)
    end
  end

  @doc """
  The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385
  The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

  ## Example
        iex> Euler.sol_6()
        25_164_150
  """
  def sol_6 do
    nums = Enum.to_list(1..100)
    :lists.sum(nums) * :lists.sum(nums) - :lists.sum(Enum.map(nums, &(&1 * &1)))
  end

  def is_prime(2), do: true
  def is_prime(n) when n < 2 or rem(n, 2) == 0, do: false
  def is_prime(n), do: hd(factors(n)) == n

  def prime_sequence, do: Stream.iterate(2, &(&1 + 1)) |> Stream.filter(&is_prime/1)

  @doc """
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

  What is the 10 001st prime number?

  ## Example
        iex> Euler.sol_7()
        104_743
  """
  def sol_7 do
    hd(Euler.prime_sequence() |> Stream.drop(10_000) |> Enum.take(1))
  end
end
